
---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "goquorum-node.fullname" . }}-pre-install-hook
  labels:
    app.kubernetes.io/name: {{ include "goquorum-node.fullname" . }}-pre-install-hook
    app.kubernetes.io/instance: {{ .Release.Name }}
  namespace: {{ .Release.Namespace }}
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "0"
    "helm.sh/hook-delete-policy": "hook-succeeded"
spec:
  backoffLimit: 1
  completions: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "goquorum-node.fullname" . }}-pre-install-hook
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      serviceAccountName: {{ include "goquorum-node.fullname" . }}-hooks-sa
      restartPolicy: "OnFailure"
      containers:
      - name: {{ template "goquorum-node.fullname" . }}-quorum-pre-start-hook
        image: "{{ .Values.image.hooks.repository }}:{{ .Values.image.hooks.tag }}"
        imagePullPolicy: {{ .Values.image.hooks.pullPolicy }}
        securityContext:
          runAsUser: 0
        command:
          - /bin/bash
          - -c
        args:
          - |

            echo "{{ template "goquorum-node.fullname" . }} Pre Install hook ..."

            # provider: local
            function safeWriteSecret {
              key=$1
              fpath=$2
              kubectl get secret ${key}-keys --namespace {{ .Release.Namespace }} -o json > /dev/null 2>&1
              if [ $? -ne 0 ]; then
                kubectl create secret generic ${key}-keys --namespace {{ .Release.Namespace }} --from-file=nodekey=${fpath}/nodekey --from-file=nodekey.pub=${fpath}/nodekey.pub --from-file=enode=${fpath}/nodekey.pub  --from-file=accountPrivate.key=${fpath}/accountPrivateKey --from-file=accountPassword=${fpath}/accountPassword --from-file=accountKeystore=${fpath}/accountKeystore --from-file=accountAdddress=${fpath}/accountAddress
              else
                # if the key exists pull it from secrets so that when you update the enodes configmap, you have the right value
                mkdir -p $fpath
                kubectl get secrets --namespace {{ .Release.Namespace }} ${key}-keys -o json | jq '.data.enode' | tr -d '"' | base64 --decode > $fpath/nodekey.pub
              fi
            }

            function update_quorum_peers_configmap {
              kubectl get configmap --namespace {{ .Release.Namespace }} goquorum-peers -o json
              if [ $? -ne 0 ]; then
                  echo "[]" > /tmp/static-nodes.json.raw
              else
                echo $(kubectl get configmap --namespace {{ .Release.Namespace }} goquorum-peers -o jsonpath='{.data.static-nodes\.json}' ) > /tmp/static-nodes.json.raw
              fi

              # update the entries
              echo "updating goquorum-peers..."
              pubkey=$(cat /tmp/enode )
              NEEDLE="enode://$pubkey@{{ template "goquorum-node.fullname" . }}-0.{{ template "goquorum-node.fullname" . }}.{{ .Release.Namespace }}.svc.cluster.local:30303?discport=0"
              cat /tmp/static-nodes.json.raw | jq --arg NEEDLE "$NEEDLE" '. += [ $NEEDLE ] | unique ' > /tmp/static-nodes.json
              kubectl create configmap --namespace {{ .Release.Namespace }} goquorum-peers --from-file=static-nodes.json=/tmp/static-nodes.json -o yaml --dry-run=client | kubectl replace -f -
            }

            function update_tessera_peers_configmap {
              kubectl -n {{ .Release.Namespace }} get configmap tessera-peers -o json
              # first time a tx node is deployed and there is no configmap
              if [ $? -ne 0 ]; then
                echo "No tessera-peers found, creating a new one..."
                echo "[{ \"url\": \"http://{{ template "goquorum-node.fullname" . }}.{{ .Release.Namespace }}.svc.cluster.local:9000\" }]"  > /tmp/tessera-peers
                kubectl --namespace {{ .Release.Namespace }} create configmap tessera-peers --from-file=tesseraPeers=/tmp/tessera-peers

              # update the entries
              else
                echo "Tessera-peers found, updating existing..."
                echo $(kubectl -n {{ .Release.Namespace }} get configmap tessera-peers -o jsonpath='{.data.tesseraPeers}' ) > /tmp/tessera-peers.raw
                NEEDLE="http://{{ template "goquorum-node.fullname" . }}.{{ .Release.Namespace }}.svc.cluster.local:9000"
                cat /tmp/tessera-peers.raw | jq --arg NEEDLE "$NEEDLE" '. += [{"url": $NEEDLE}] | unique ' > /tmp/tessera-peers
                kubectl -n {{ .Release.Namespace }} create configmap tessera-peers --from-file=tesseraPeers=/tmp/tessera-peers -o yaml --dry-run=client | kubectl replace -f -
              fi
            }

            echo "{{ template "goquorum-node.fullname" . }} hook ..."
            echo "Nodekey generation ..."
            FOLDER_PATH=$(quorum-genesis-tool --validators 0 --members 1 --bootnodes 0 {{ if .Values.node.goquorum.account.password }} --accountPassword {{ .Values.node.goquorum.account.password }} {{ end }} --outputPath /generated-config | tail -1 | sed -e "s/^Artifacts in folder: //")
            echo "Creating {{ template "goquorum-node.fullname" . }} secrets in k8s ..."

            safeWriteSecret {{ template "goquorum-node.fullname" . }} $FOLDER_PATH/member0

            cat $FOLDER_PATH/member0/nodekey.pub > /tmp/enode
            update_quorum_peers_configmap
            kubectl create configmap {{ template "goquorum-node.fullname" . }}-address --from-file=address=$FOLDER_PATH/member0/address
            echo "Quorum Completed"

{{- if .Values.quorumFlags.privacy }}
            FOLDER_PATH=$(quorum-genesis-tool --validators 0 --members 1 --bootnodes 0 --tesseraEnabled true --tesseraPassword {{ .Values.node.tessera.password }} --outputPath /tmp/tessera | tail -1 | sed -e "s/^Artifacts in folder: //")
            if [ ! -f "$FOLDER_PATH/member0/passwordFile.txt" ]; then
              echo "" > $FOLDER_PATH/member0/passwordFile.txt
            fi
            echo "Creating {{ template "goquorum-node.fullname" . }}-tessera-keys secrets in k8s ..."

            kubectl get secret ${key}-tessera-keys --namespace {{ .Release.Namespace }} -o json > /dev/null 2>&1
            if [ $? -ne 0 ]; then
              kubectl create secret generic {{ template "goquorum-node.fullname" . }}-tessera-keys --namespace {{ .Release.Namespace }} --from-file=tm.key=$FOLDER_PATH/member0/tessera.key --from-file=tm.pub=$FOLDER_PATH/member0/tessera.pub --from-file=tm.password=$FOLDER_PATH/member0/passwordFile.txt
            fi
            update_tessera_peers_configmap
{{- end }}
            echo "Tessera Completed"

