
---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "goquorum-node.fullname" . }}-pre-delete-hook
  labels:
    app.kubernetes.io/name: {{ include "goquorum-node.fullname" . }}-pre-install-hook
    app.kubernetes.io/instance: {{ .Release.Name }}
  namespace: {{ .Release.Namespace }}
  annotations:
    helm.sh/hook: pre-delete
    helm.sh/hook-weight: "0"
    helm.sh/hook-delete-policy: "hook-succeeded"
spec:
  backoffLimit: 3
  completions: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "goquorum-node.fullname" . }}-pre-install-hook
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      serviceAccountName: {{ include "goquorum-node.fullname" . }}-hooks-sa
      restartPolicy: "OnFailure"
      containers:
        - name: {{ template "goquorum-node.fullname" . }}-node-pre-delete-hook
          image: "{{ .Values.image.hooks.repository }}:{{ .Values.image.hooks.tag }}"
          imagePullPolicy: {{ .Values.image.hooks.pullPolicy }}
          command:
            - /bin/bash
            - -c
          args:
            - |

              echo "{{ template "goquorum-node.fullname" . }} Pre Delete hook ..."

              # provider: local
              function deleteSecret {
                key=$1
                kubectl delete secret ${key} --namespace {{ .Release.Namespace }}
              }

              function delete_node_from_tessera_peers_configmap {
                kubectl -n {{ .Release.Namespace }} get configmap tessera-peers -o json
                # if there is no configmap, do nothing
                if [ $? -ne 0 ]; then
                  echo "No tessera-peers found, nothing to do..."
                # delete the one
                else
                  echo "tessera-peers found, deleting {{ template "goquorum-node.fullname" . }}..."
                  echo $(kubectl -n {{ .Release.Namespace }} get configmap tessera-peers -o jsonpath='{.data.tesseraPeers}' ) > /tmp/tessera-peers.raw
                  cat /tmp/tessera-peers.raw | jq --arg NEEDLE "{{ template "goquorum-node.fullname" . }}" 'del(.[] | select( .url | contains($NEEDLE) ))' > /tmp/tessera-peers
                  kubectl -n {{ .Release.Namespace }} create configmap tessera-peers --from-file=tesseraPeers=/tmp/tessera-peers -o yaml --dry-run=client | kubectl replace -f -
                fi
              }

              function delete_node_from_quorum_peers_configmap {
                kubectl -n {{ .Release.Namespace }}  get configmap goquorum-peers -o json
                # if there is no configmap, do nothing
                if [ $? -ne 0 ]; then
                  echo "No peers found, nothing to do..."
                # delete the one
                else
                  echo "goquorum-peers found, deleting {{ template "goquorum-node.fullname" . }}..."
                  echo $(kubectl -n {{ .Release.Namespace }} get configmap goquorum-peers -o jsonpath='{.data.static-nodes\.json}' ) > /tmp/static-nodes.json.raw
                  cat /tmp/static-nodes.json.raw | jq --arg NEEDLE "{{ template "goquorum-node.fullname" . }}" 'del(.[] | select( . | contains($NEEDLE) ))' > /tmp/static-nodes.json
                  kubectl -n {{ .Release.Namespace }} create configmap goquorum-peers --from-file=static-nodes.json=/tmp/static-nodes.json -o yaml --dry-run=client | kubectl replace -f -

                  echo "Deleting node address configmap... "
                  kubectl delete configmap {{ template "goquorum-node.fullname" . }}-address --namespace {{ .Release.Namespace }}
                fi
              }

              delete_node_from_quorum_peers_configmap
              delete_node_from_tessera_peers_configmap


{{- if .Values.quorumFlags.removeKeysOnDelete }}
              # provider: local
              deleteSecret {{ template "goquorum-node.fullname" . }}-keys
{{- if .Values.quorumFlags.privacy }}
              deleteSecret {{ template "goquorum-node.fullname" . }}-tessera-keys
{{- end }}


{{- end }}
              echo "Completed"

