---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "goquorum-genesis.name" . }}-init
  labels:
    app: {{ template "goquorum-genesis.name" . }}
    chart: {{ template "goquorum-genesis.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
    namespace: {{ .Release.Namespace }}
    app.kubernetes.io/name: {{ include "goquorum-genesis.name" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    helm.sh/chart: {{ include "goquorum-genesis.chart" . }}
  namespace: {{ .Release.Namespace }}
  annotations:
    helm.sh/hook-delete-policy: "hook-succeeded"
spec:
  backoffLimit: 3
  completions: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "goquorum-genesis.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      serviceAccountName: {{ include "goquorum-genesis.name" . }}-sa
      restartPolicy: "Never"
      containers:
        - name: generate-genesis
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          securityContext:
            runAsUser: 0
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command:
            - /bin/bash
            - -c
          args:
            - |
              echo "Creating config ..."

              function safeWriteSecret {
                key=$1
                fpath=$2
                kubectl create secret generic ${key}-keys --namespace {{ .Release.Namespace }} --from-file=nodekey=${fpath}/nodekey --from-file=nodekey.pub=${fpath}/nodekey.pub --from-file=enode=${fpath}/nodekey.pub --from-file=accountPrivate.key=${fpath}/accountPrivateKey --from-file=accountPassword=${fpath}/accountPassword --from-file=accountKeystore=${fpath}/accountKeystore --from-file=accountAdddress=${fpath}/accountAddress
              }

              function safeWriteGenesisConfigmap {
                FOLDER_PATH=$1
                kubectl get configmap --namespace {{ .Release.Namespace }} goquorum-genesis
                if [ $? -ne 0 ]; then
                  kubectl create configmap --namespace {{ .Release.Namespace }} goquorum-genesis --from-file=genesis.json=$FOLDER_PATH/goQuorum/genesis.json
                fi
              }

              function safeWriteQuorumPeersConfigmap {
                kubectl get configmap --namespace {{ .Release.Namespace }} goquorum-peers
                if [ $? -ne 0 ]; then
                  kubectl create configmap --namespace {{ .Release.Namespace }} goquorum-peers --from-file=static-nodes.json=/generated-config/static-nodes.json
                fi
              }

              FOLDER_PATH=$(quorum-genesis-tool --consensus {{ .Values.rawGenesisConfig.genesis.config.algorithm.consensus }} {{ if .Values.rawGenesisConfig.blockchain.nodes.generate }} --validators {{ .Values.rawGenesisConfig.blockchain.nodes.count }} {{ else }} --validators 0 {{ end }} --members 0 --bootnodes 0 --chainID {{ .Values.rawGenesisConfig.genesis.config.chainId }} --blockperiod {{ .Values.rawGenesisConfig.genesis.config.algorithm.blockperiodseconds }} --epochLength {{ .Values.rawGenesisConfig.genesis.config.algorithm.epochlength }} --requestTimeout {{ .Values.rawGenesisConfig.genesis.config.algorithm.requesttimeoutseconds }} --difficulty {{ .Values.rawGenesisConfig.genesis.difficulty }} --gasLimit {{ .Values.rawGenesisConfig.genesis.gasLimit }} --coinbase {{ .Values.rawGenesisConfig.genesis.coinbase }} {{ if .Values.rawGenesisConfig.blockchain.accountPassword }} --accountPassword {{ .Values.rawGenesisConfig.blockchain.accountPassword }} {{ end }} {{ if eq .Values.cluster.cloudNativeServices false }} --quickstartDevAccounts {{ .Values.rawGenesisConfig.genesis.includeQuickStartAccounts }} {{ end }} --outputPath /generated-config | tail -1 | sed -e "s/^Artifacts in folder: //")

              echo $FOLDER_PATH
              echo "Creating genesis configmap in k8s ..."
              safeWriteGenesisConfigmap $FOLDER_PATH

              # create the static-nodes with proper dns names for the quorum nodes
              echo "[" > /generated-config/static-nodes.json

              # 0 index so setting this to the num of validators
              echo "Creating validator keys ..."
              i=1
              for f in $(find $FOLDER_PATH -type d -iname "validator*" -exec basename {} \;); do
                echo $f

                if [ -d $FOLDER_PATH/${f} ]; then

                  echo "Creating keys for $f ..."

                  echo "Using k8s secrets"
                  safeWriteSecret goquorum-node-validator-${i} "$FOLDER_PATH/${f}"
                  kubectl create configmap --namespace {{ .Release.Namespace }} goquorum-node-validator-${i}-address --from-file=address=$FOLDER_PATH/${f}/address

                  # add to the static-nodes
                  pubkey=$(cat $FOLDER_PATH/${f}/nodekey.pub )
                  echo ",\"enode://$pubkey@goquorum-node-validator-$i-0.goquorum-node-validator-$i.{{ .Release.Namespace }}.svc.cluster.local:30303?discport=0\"" >> /generated-config/static-nodes.json

                  i=$((i+1))
                fi
              done

              echo "]" >> /generated-config/static-nodes.json
              # remove the extra comma to make it valid json
              sed -i '0,/,/s///' /generated-config/static-nodes.json
              safeWriteQuorumPeersConfigmap

              echo "Completed ..."
